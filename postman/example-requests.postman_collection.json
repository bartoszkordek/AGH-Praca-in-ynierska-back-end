{
	"info": {
		"_postman_id": "c93e452e-35a5-4214-a971-9903269a8fea",
		"name": "Praca_inzynierska",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AuthService",
			"item": [
				{
					"name": "Sign up",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Grzegorz\",\r\n    \"surname\": \"Zacharski\",\r\n     \"email\": \"xmr09697@zwoho.com\",\r\n    \"phone\": \"666 721 232\",\r\n    \"password\": \"testtest123\",\r\n    \"matchingPassword\": \"testtest123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/auth/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"auth",
								"users"
							]
						},
						"description": "Provide real email address for example from https://10minutemail.net/"
					},
					"response": []
				},
				{
					"name": "Confirm creating account",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8020/auth/users/confirmRegistration?token=2c341434-270d-4b5c-b3f3-0dabf027b10f",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"auth",
								"users",
								"confirmRegistration"
							],
							"query": [
								{
									"key": "token",
									"value": "2c341434-270d-4b5c-b3f3-0dabf027b10f"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Log in",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"email\": \"g.zacharski73@gmail.com\",\r\n    \"password\": \"qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJiOWE5M2QxZS1lZDEzLTQwNDEtODJlNC0zNTQyYTVjMjFmZjciLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNjIxOTYzMTA4fQ.6Vei_sYX9xhQJtbN6c-bRGGCWXK3MRnBz6r9xdG77ec",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8020/auth/users/status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"auth",
								"users",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log out",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1N2QxNDRkOS04MmQ4LTRhYTItYmFhZi1hMmRkMjA2YWMzZDIiLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNjIxNzM1OTE2fQ.auqne1ECE-ycm1Mo89cjzxB2W_m9uJo9Vnk3cXYRdKc",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8020/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"g.zacharski73@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/auth/resetPassword",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"auth",
								"resetPassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provide new password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"testtest1234\",\r\n    \"matchingPassword\": \"testtest1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/auth/confirmNewPassword?token=26b7fd19-e73e-47b2-bdca-2842ffd12404",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"auth",
								"confirmNewPassword"
							],
							"query": [
								{
									"key": "token",
									"value": "26b7fd19-e73e-47b2-bdca-2842ffd12404"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AccountService",
			"item": [
				{
					"name": "Change password",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1N2QxNDRkOS04MmQ4LTRhYTItYmFhZi1hMmRkMjA2YWMzZDIiLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNjIxNzM1ODAzfQ.7DcvVlrOSoNfGC5JuFhnlG1tysSOfwcikQfy-bbcw4w",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"oldPassword\":\"testtest123\",\r\n    \"newPassword\":\"testtest123456\",\r\n    \"matchingNewPassword\":\"testtest123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/account/changePassword/57d144d9-82d8-4aa2-baaf-a2dd206ac3d2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"account",
								"changePassword",
								"57d144d9-82d8-4aa2-baaf-a2dd206ac3d2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change user data",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJiOWE5M2QxZS1lZDEzLTQwNDEtODJlNC0zNTQyYTVjMjFmZjciLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNjIxOTYzMTA4fQ.6Vei_sYX9xhQJtbN6c-bRGGCWXK3MRnBz6r9xdG77ec",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wojciech\",\r\n    \"surname\": \"Zacharski\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/account/changeUserData/b9a93d1e-ed13-4041-82e4-3542a5c21ff7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"account",
								"changeUserData",
								"b9a93d1e-ed13-4041-82e4-3542a5c21ff7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change User privacy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJiOWE5M2QxZS1lZDEzLTQwNDEtODJlNC0zNTQyYTVjMjFmZjciLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNjIxOTYzMTA4fQ.6Vei_sYX9xhQJtbN6c-bRGGCWXK3MRnBz6r9xdG77ec",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"regulationsAccepted\": true,\r\n    \"allowShowingTrainingsParticipation\": true,\r\n    \"allowShowingUserStatistics\": true,\r\n    \"allowShowingAvatar\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/account/changePrivacy/b9a93d1e-ed13-4041-82e4-3542a5c21ff7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"account",
								"changePrivacy",
								"b9a93d1e-ed13-4041-82e4-3542a5c21ff7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload avatar image",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkZTE2ZWI4Ny0yNWZiLTRiMWQtYTRmZC01N2E2NDc0YWM3MzEiLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNjIzMDY5ODM4fQ.qFPAlqBS0OEbEue8oA8eLssk4rD6gUHzI67H7Mbbtr4",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "avatar",
									"type": "file",
									"src": "/C:/Users/gzach/OneDrive/Obrazy/IMG_20200319_233721_444.jpg"
								},
								{
									"key": "title",
									"value": "Tytu≈Ç",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://localhost:8020/account/photos/de16eb87-25fb-4b1d-a4fd-57a6474ac731/avatar",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"account",
								"photos",
								"de16eb87-25fb-4b1d-a4fd-57a6474ac731",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get avatar image",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkZTE2ZWI4Ny0yNWZiLTRiMWQtYTRmZC01N2E2NDc0YWM3MzEiLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNjIzMDY5ODM4fQ.qFPAlqBS0OEbEue8oA8eLssk4rD6gUHzI67H7Mbbtr4",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/account/photos/de16eb87-25fb-4b1d-a4fd-57a6474ac731/avatar",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"account",
								"photos",
								"de16eb87-25fb-4b1d-a4fd-57a6474ac731",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete account",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1N2QxNDRkOS04MmQ4LTRhYTItYmFhZi1hMmRkMjA2YWMzZDIiLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNjIxNzM1OTg5fQ.iadwB2cgLgeqREi8XR23-iAFU1nM9ZN5uD7YyZlJLLc",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8020/account/57d144d9-82d8-4aa2-baaf-a2dd206ac3d2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"account",
								"57d144d9-82d8-4aa2-baaf-a2dd206ac3d2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TrainingService",
			"item": [
				{
					"name": "TrainingTypes",
					"item": [
						{
							"name": "Create training type",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmZDk3ZTJkZS03MGU1LTRlZTEtOTE0ZC1kYjQ4MGZhZTQ3M2IiLCJyb2xlcyI6WyJST0xFX1VTRVIiLCJST0xFX0FETUlOIl0sImV4cCI6MTYyMzg1NTU0Mn0.SLysABF7SopiiDcx2qeet3fZylBhsQR1-HjmRJyuUog",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "pl",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"contentType": "image/jpeg",
											"type": "file",
											"src": "/C:/Users/gzach/OneDrive/Obrazy/shiba_inu_smile_2.jpg"
										},
										{
											"key": "body",
											"value": "{ \"name\": \"Test name\", \"description\":\"test description\", \"duration\":\"02:30:00.000\"}",
											"contentType": "application/json",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8020/trainings/trainingType",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"trainingType"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all training types",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/trainingType",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"trainingType"
									]
								}
							},
							"response": []
						},
						{
							"name": "View training type by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/trainingType/262ef6b5-09f8-4c0b-a614-7f95c3e31620",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"trainingType",
										"262ef6b5-09f8-4c0b-a614-7f95c3e31620"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update training type",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmZDk3ZTJkZS03MGU1LTRlZTEtOTE0ZC1kYjQ4MGZhZTQ3M2IiLCJyb2xlcyI6WyJST0xFX1VTRVIiLCJST0xFX0FETUlOIl0sImV4cCI6MTYyMzg1NTU0Mn0.SLysABF7SopiiDcx2qeet3fZylBhsQR1-HjmRJyuUog",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "pl",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"contentType": "image/jpeg",
											"type": "file",
											"src": "/C:/Users/gzach/OneDrive/Obrazy/20200902_200403.jpg",
											"disabled": true
										},
										{
											"key": "body",
											"value": "{ \"name\": \"Test name5\", \"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis vitae justo ut quam sollicitudin hendrerit in lobortis sapien. Cras auctor consequat leo, sed tincidunt elit auctor ac. Ut quis purus quis massa aliquam dictum ac eget erat. Vivamus aliquam magna eget nunc semper, sed dapibus quam euismod. Nullam ornare maximus auctor. Vestibulum vel lobortis mi, a fermentum mauris. Maecenas eget nisi sit amet odio placerat placerat vitae eget magna.\", \"duration\":\"02:30:00.000\"}",
											"contentType": "application/json",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8020/trainings/trainingType/39e160f5-0773-4c79-b9d1-73970731b539",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"trainingType",
										"39e160f5-0773-4c79-b9d1-73970731b539"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete training type by id",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept-Language",
										"value": "pl",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmZDk3ZTJkZS03MGU1LTRlZTEtOTE0ZC1kYjQ4MGZhZTQ3M2IiLCJyb2xlcyI6WyJST0xFX1VTRVIiLCJST0xFX0FETUlOIl0sImV4cCI6MTYyMzg1NTU0Mn0.SLysABF7SopiiDcx2qeet3fZylBhsQR1-HjmRJyuUog",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8020/trainings/trainingType/39e160f5-0773-4c79-b9d1-73970731b539",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"trainingType",
										"39e160f5-0773-4c79-b9d1-73970731b539"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "View group training all reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Body not null\", () => {\r",
											"    pm.expect(isNull(pm.response.body)).to.be.false;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/reviews/all",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"reviews",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "View group training review by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Body not null\", () => {\r",
											"    pm.expect(isNull(pm.response.body)).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/reviews/{reviewId}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"reviews",
										"{reviewId}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group training review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\" : \"TestTraining1\",\r\n    \"stars\" : 5,\r\n    \"text\" : \"Very good, training\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/review?clientId=client123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"review"
									],
									"query": [
										{
											"key": "clientId",
											"value": "client123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group training review by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/review/{reviewId}?clientId=client123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"review",
										"{reviewId}"
									],
									"query": [
										{
											"key": "clientId",
											"value": "client123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify group training review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"stars\" : 4,\r\n    \"text\" : \"Good training!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/review/{reviewId}?clientId=client123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"review",
										"{reviewId}"
									],
									"query": [
										{
											"key": "clientId",
											"value": "client123"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Individual",
					"item": [
						{
							"name": "View all individual trainings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/individual",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"individual"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all accepted individual trainings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/individual/all/accepted",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"individual",
										"all",
										"accepted"
									]
								}
							},
							"response": []
						},
						{
							"name": "View my all individual trainings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/individual/all/mytrainings/all?clientId={clientId}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"individual",
										"all",
										"mytrainings",
										"all"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{clientId}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create individual training request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainerId\" : \"testTrainer1\",\r\n    \"date\" : \"2021-10-15\",\r\n    \"startTime\": \"12:00\",\r\n    \"endTime\" : \"13:00\",\r\n    \"remarks\" : \"I need a good individual TRX traning\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/individual/request?clientId={clientId}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"individual",
										"request"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{clientId}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete individual training request by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/individual/request/{trainingId}?clientId={clientId}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"individual",
										"request",
										"{trainingId}"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{clientId}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View individual training by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/individual/individual/{trainingId}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"individual",
										"individual",
										"{trainingId}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Accept individual training by trainer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"hallNo\" : 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/individual/{trainingId}/accept",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"individual",
										"{trainingId}",
										"accept"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decline individual training by trainer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/individual/{trainingId}/decline",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"individual",
										"{trainingId}",
										"decline"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Create group training",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"validGroupTrainingId\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll to group training",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/enroll?clientId={{validClientId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{validGroupTrainingId}}",
										"enroll"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{{validClientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add to reserve list of group training",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{{validGroupTrainingId}}/reservelist/add?clientId={{validClientId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{{validGroupTrainingId}}",
										"reservelist",
										"add"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{{validClientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group training by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"UpdatedTestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{validGroupTrainingId}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group training by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/remove",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{validGroupTrainingId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when retro date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2000-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when start date after end date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"18:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when invalid end hour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"25:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create grooup training when bad format date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"01/01/2025\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when invalid hall number (less than 0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": -1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when invalid date - date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-32\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when indalid date - month",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-13-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when invalid start hour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"30:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when invalid limit (less than 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 0,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when missing required data - training name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when missing required data - trainer id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when missing required data - date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when missing required data - start hour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when missing required data - end hour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when missing required data - hall number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not create group training when missing required data - limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not enroll to group training when invalid training id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{invalidGroupTrainingId}}/enroll?clientId={{validClientId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{invalidGroupTrainingId}}",
										"enroll"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{{validClientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not add to reserve list when invalid training id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{{invalidGroupTrainingId}}/reservelist/add?clientId={{validClientId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{{invalidGroupTrainingId}}",
										"reservelist",
										"add"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{{validClientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot create overlapping group training - the same start and end time",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: \"http://localhost:8020/trainings/group\",\r",
											"    method: \"GET\",\r",
											"    header: {'Connection': 'keep-alive'},\r",
											"    body: {}\r",
											" },\r",
											" function (err, res) {\r",
											"    console.log('Existing trainings: ' + res.json());\r",
											" }\r",
											");\r",
											"\r",
											"const requestBody = {\r",
											"    \"trainingName\": \"TestTraining1\",\r",
											"    \"trainerId\": \"Trainer1\",\r",
											"    \"date\": \"2021-07-02\",\r",
											"    \"startTime\": \"16:00\",\r",
											"    \"endTime\": \"17:00\",\r",
											"    \"hallNo\": 1,\r",
											"    \"limit\": 20,\r",
											"    \"participants\": [],\r",
											"    \"reserveList\": []\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:8020/trainings/group',\r",
											"    method: 'POST',\r",
											"    header: {'Content-type': 'application/json', 'Connection': 'keep-alive'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(requestBody)\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    createdTrainingId = res.json()._id;\r",
											"    console.log('createdTrainingId: ' + createdTrainingId);\r",
											"    pm.globals.set(\"createdGroupTrainingId\",  res.json()._id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"createdPreviouslyTrainingId = pm.globals.get(\"createdGroupTrainingId\");\r",
											"console.log('Previously created training id: ' + createdPreviouslyTrainingId);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:8020/trainings/group/'+ createdPreviouslyTrainingId +'/remove',\r",
											"    method: 'DELETE',\r",
											"}, function (err, res) {\r",
											"    console.log(res);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-07-02\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot create overlapping group training - the start date between start and end date of first event end date after end date of first event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody = {\r",
											"    \"trainingName\": \"TestTraining1\",\r",
											"    \"trainerId\": \"Trainer1\",\r",
											"    \"date\": \"2021-07-02\",\r",
											"    \"startTime\": \"16:00\",\r",
											"    \"endTime\": \"17:00\",\r",
											"    \"hallNo\": 1,\r",
											"    \"limit\": 20,\r",
											"    \"participants\": [],\r",
											"    \"reserveList\": []\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:8020/trainings/group',\r",
											"    method: 'POST',\r",
											"    header: {'Content-type': 'application/json', 'Connection': 'keep-alive'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(requestBody)\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    createdTrainingId = res.json()._id;\r",
											"    console.log('createdTrainingId: ' + createdTrainingId);\r",
											"    pm.globals.set(\"createdGroupTrainingId\",  res.json()._id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"createdPreviouslyTrainingId = pm.globals.get(\"createdGroupTrainingId\");\r",
											"console.log('Previously created training id: ' + createdPreviouslyTrainingId);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:8020/trainings/group/'+ createdPreviouslyTrainingId +'/remove',\r",
											"    method: 'DELETE',\r",
											"}, function (err, res) {\r",
											"    console.log(res);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-07-02\",\r\n    \"startTime\": \"16:30\",\r\n    \"endTime\": \"17:30\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not update group training when invalid training id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"UpdatedTestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{invalidGroupTrainingId}}/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{invalidGroupTrainingId}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot create overlapping group training - start date after first event start date and end date before first event end date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody = {\r",
											"    \"trainingName\": \"TestTraining1\",\r",
											"    \"trainerId\": \"Trainer1\",\r",
											"    \"date\": \"2021-07-02\",\r",
											"    \"startTime\": \"16:00\",\r",
											"    \"endTime\": \"17:00\",\r",
											"    \"hallNo\": 1,\r",
											"    \"limit\": 20,\r",
											"    \"participants\": [],\r",
											"    \"reserveList\": []\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:8020/trainings/group',\r",
											"    method: 'POST',\r",
											"    header: {'Content-type': 'application/json', 'Connection': 'keep-alive'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(requestBody)\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    createdTrainingId = res.json()._id;\r",
											"    console.log('createdTrainingId: ' + createdTrainingId);\r",
											"    pm.globals.set(\"createdGroupTrainingId\",  res.json()._id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"createdPreviouslyTrainingId = pm.globals.get(\"createdGroupTrainingId\");\r",
											"console.log('Previously created training id: ' + createdPreviouslyTrainingId);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:8020/trainings/group/'+ createdPreviouslyTrainingId +'/remove',\r",
											"    method: 'DELETE',\r",
											"}, function (err, res) {\r",
											"    console.log(res);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-07-02\",\r\n    \"startTime\": \"16:15\",\r\n    \"endTime\": \"16:45\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not update group training when retro date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"UpdatedTestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2000-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{validGroupTrainingId}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not update group training when start hour after end hour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"a\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trainingName\": \"UpdatedTestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-10-01\",\r\n    \"startTime\": \"17:00\",\r\n    \"endTime\": \"16:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{validGroupTrainingId}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not delete group training when invalid training id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{invalidGroupTrainingId}}/remove",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{invalidGroupTrainingId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "View my all group trainings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/all/mytrainings/all?clientId={{validClientId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"all",
										"mytrainings",
										"all"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{{validClientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group training reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{trainingId}/enroll?clientId={{validClientId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{trainingId}",
										"enroll"
									],
									"query": [
										{
											"key": "clientId",
											"value": "{{validClientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View training participants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{validClientId}}/participants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{validClientId}}",
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not view group training participants when invalid training id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/participants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{validGroupTrainingId}}",
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all group trainings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "View group training by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).equals(200);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{validGroupTrainingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should not view group training id when invalid training id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual, isNull, isEmpty } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 400.\", () => {\r",
											"    pm.expect(pm.response.code).equals(400);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/group/{{invalidGroupTrainingId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"group",
										"{{invalidGroupTrainingId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}