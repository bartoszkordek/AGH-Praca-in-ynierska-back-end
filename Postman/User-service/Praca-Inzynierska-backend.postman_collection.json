{
	"info": {
		"_postman_id": "3db11c94-b2b5-4a2f-afc7-0c860f105b21",
		"name": "Praca-Inzynierska-backend",
		"description": "Backend test cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Correct Sign In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Użytkownik został zarejestrowany.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Użytkownik został zarejestrowany.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is empty\", () =>{\r",
									"    const errors = pm.response.json().erros;\r",
									"    pm.expect(isEmpty(errors)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName1\",\r\n    \"surname\": \"TestLastName1\",\r\n    \"email\": \"test_1@test.com\",\r\n    \"phone\": \"655221559\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - wrong email test@test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"test@\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - wrong email test@",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"test@\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - wrong email @test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"@test\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - wrong email test@.test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"test@.test\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - wrong email test@.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"test@.\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - wrong email test@net@com",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"test@net@com\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - wrong phone number - too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName2\",\r\n    \"surname\": \"TestLastName2\",\r\n    \"email\": \"test_2@test.com\",\r\n    \"phone\": \"554662551111111111111111111111111111111111111111111111111111111111111111111118\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - wrong phone number - too short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName2\",\r\n    \"surname\": \"TestLastName2\",\r\n    \"email\": \"test_2@test.com\",\r\n    \"phone\": \"552561\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - passwords do not match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName3\",\r\n    \"surname\": \"TestLastName3\",\r\n    \"email\": \"test_3@test.com\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!abcd\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - super long password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName3\",\r\n    \"surname\": \"TestLastName3\",\r\n    \"email\": \"test_3@test.com\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Hello, everyone! This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet.\",\r\n    \"matchingPassword\": \"Hello, everyone! This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet. This is the LONGEST TEXT EVER! I was inspired by the various other longest texts ever on the internet.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - too short password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName3\",\r\n    \"surname\": \"TestLastName3\",\r\n    \"email\": \"test_3@test.com\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test123\",\r\n    \"matchingPassword\": \"Test123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - too long password (25 signs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName3\",\r\n    \"surname\": \"TestLastName3\",\r\n    \"email\": \"test_3@test.com\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test12234287y8qrhoqh31980\",\r\n    \"matchingPassword\": \"Test12234287y8qrhoqh31980\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"test_4@testcom\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - empty surname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"\",\r\n    \"email\": \"test_4@testcom\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - empty email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct Sign In - empty phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Użytkownik został zarejestrowany.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Użytkownik został zarejestrowany.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is empty\", () =>{\r",
									"    const errors = pm.response.json().erros;\r",
									"    pm.expect(isEmpty(errors)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"test_4@testcom\",\r\n    \"phone\": \"\",\r\n    \"password\": \"Test1234!\",\r\n    \"matchingPassword\": \"Test1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect Sign In - empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be qual to true\", ()=>{\r",
									"    const id = pm.response.json().id;\r",
									"    pm.expect(isNull(id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be equals to: Rejestracja zakończona niepowodzeniem.\", ()=>{\r",
									"    const message = pm.response.json().message;\r",
									"    pm.expect(isEqual(message,\"Rejestracja zakończona niepowodzeniem.\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", () =>{\r",
									"    const errors = pm.response.json().errors;\r",
									"    pm.expect(isEmpty(errors)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "pl",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestFirstName\",\r\n    \"surname\": \"TestLastName\",\r\n    \"email\": \"test_4@testcom\",\r\n    \"phone\": \"554662558\",\r\n    \"password\": \"\",\r\n    \"matchingPassword\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/user/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot use /status without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 403.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.equal(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/user/users/status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"user",
								"users",
								"status"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}