{
	"info": {
		"_postman_id": "6bfd40c4-0688-4954-aaf9-72265eba2250",
		"name": "Praca_inzynierska-trainings",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Group",
			"item": [
				{
					"name": "Create group training",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"validGroupTrainingId\", pm.response.json()._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingTypeId\": \"222ed952-es7f-435a-bd1e-9fb2a327c4dk\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enroll to group training",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/enroll?clientId={{validClientId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}",
								"enroll"
							],
							"query": [
								{
									"key": "clientId",
									"value": "{{validClientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to reserve list of group training",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{{validGroupTrainingId}}/reservelist/add?clientId={{validClientId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{{validGroupTrainingId}}",
								"reservelist",
								"add"
							],
							"query": [
								{
									"key": "clientId",
									"value": "{{validClientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update group training by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingTypeId\": \"123ed952-es7f-435a-bd1e-9fb2a327c4dk\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete group training by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when retro date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2000-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when start date after end date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"18:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when invalid end hour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"25:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create grooup training when bad format date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"01/01/2025\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when invalid hall number (less than 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": -1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when invalid date - date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-32\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when indalid date - month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-13-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when invalid start hour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"30:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when invalid limit (less than 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 0,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when missing required data - training name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when missing required data - trainer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when missing required data - date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when missing required data - start hour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when missing required data - end hour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when missing required data - hall number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not create group training when missing required data - limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2025-07-01\",\r\n    \"startTime\": \"20:00\",\r\n    \"endTime\": \"21:00\",\r\n    \"hallNo\": 1,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not enroll to group training when invalid training id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{invalidGroupTrainingId}}/enroll?clientId={{validClientId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{invalidGroupTrainingId}}",
								"enroll"
							],
							"query": [
								{
									"key": "clientId",
									"value": "{{validClientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not add to reserve list when invalid training id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{{invalidGroupTrainingId}}/reservelist/add?clientId={{validClientId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{{invalidGroupTrainingId}}",
								"reservelist",
								"add"
							],
							"query": [
								{
									"key": "clientId",
									"value": "{{validClientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot create overlapping group training - the same start and end time",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://localhost:8020/trainings/group\",\r",
									"    method: \"GET\",\r",
									"    header: {'Connection': 'keep-alive'},\r",
									"    body: {}\r",
									" },\r",
									" function (err, res) {\r",
									"    console.log('Existing trainings: ' + res.json());\r",
									" }\r",
									");\r",
									"\r",
									"const requestBody = {\r",
									"    \"trainingName\": \"TestTraining1\",\r",
									"    \"trainerId\": \"Trainer1\",\r",
									"    \"date\": \"2021-07-02\",\r",
									"    \"startTime\": \"16:00\",\r",
									"    \"endTime\": \"17:00\",\r",
									"    \"hallNo\": 1,\r",
									"    \"limit\": 20,\r",
									"    \"participants\": [],\r",
									"    \"reserveList\": []\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8020/trainings/group',\r",
									"    method: 'POST',\r",
									"    header: {'Content-type': 'application/json', 'Connection': 'keep-alive'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(requestBody)\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    createdTrainingId = res.json()._id;\r",
									"    console.log('createdTrainingId: ' + createdTrainingId);\r",
									"    pm.globals.set(\"createdGroupTrainingId\",  res.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"createdPreviouslyTrainingId = pm.globals.get(\"createdGroupTrainingId\");\r",
									"console.log('Previously created training id: ' + createdPreviouslyTrainingId);\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8020/trainings/group/'+ createdPreviouslyTrainingId +'/remove',\r",
									"    method: 'DELETE',\r",
									"}, function (err, res) {\r",
									"    console.log(res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-07-02\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot create overlapping group training - the start date between start and end date of first event end date after end date of first event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {\r",
									"    \"trainingName\": \"TestTraining1\",\r",
									"    \"trainerId\": \"Trainer1\",\r",
									"    \"date\": \"2021-07-02\",\r",
									"    \"startTime\": \"16:00\",\r",
									"    \"endTime\": \"17:00\",\r",
									"    \"hallNo\": 1,\r",
									"    \"limit\": 20,\r",
									"    \"participants\": [],\r",
									"    \"reserveList\": []\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8020/trainings/group',\r",
									"    method: 'POST',\r",
									"    header: {'Content-type': 'application/json', 'Connection': 'keep-alive'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(requestBody)\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    createdTrainingId = res.json()._id;\r",
									"    console.log('createdTrainingId: ' + createdTrainingId);\r",
									"    pm.globals.set(\"createdGroupTrainingId\",  res.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"createdPreviouslyTrainingId = pm.globals.get(\"createdGroupTrainingId\");\r",
									"console.log('Previously created training id: ' + createdPreviouslyTrainingId);\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8020/trainings/group/'+ createdPreviouslyTrainingId +'/remove',\r",
									"    method: 'DELETE',\r",
									"}, function (err, res) {\r",
									"    console.log(res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-07-02\",\r\n    \"startTime\": \"16:30\",\r\n    \"endTime\": \"17:30\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not update group training when invalid training id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"UpdatedTestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{invalidGroupTrainingId}}/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{invalidGroupTrainingId}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot create overlapping group training - start date after first event start date and end date before first event end date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {\r",
									"    \"trainingName\": \"TestTraining1\",\r",
									"    \"trainerId\": \"Trainer1\",\r",
									"    \"date\": \"2021-07-02\",\r",
									"    \"startTime\": \"16:00\",\r",
									"    \"endTime\": \"17:00\",\r",
									"    \"hallNo\": 1,\r",
									"    \"limit\": 20,\r",
									"    \"participants\": [],\r",
									"    \"reserveList\": []\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8020/trainings/group',\r",
									"    method: 'POST',\r",
									"    header: {'Content-type': 'application/json', 'Connection': 'keep-alive'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(requestBody)\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    createdTrainingId = res.json()._id;\r",
									"    console.log('createdTrainingId: ' + createdTrainingId);\r",
									"    pm.globals.set(\"createdGroupTrainingId\",  res.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"createdPreviouslyTrainingId = pm.globals.get(\"createdGroupTrainingId\");\r",
									"console.log('Previously created training id: ' + createdPreviouslyTrainingId);\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8020/trainings/group/'+ createdPreviouslyTrainingId +'/remove',\r",
									"    method: 'DELETE',\r",
									"}, function (err, res) {\r",
									"    console.log(res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"TestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-07-02\",\r\n    \"startTime\": \"16:15\",\r\n    \"endTime\": \"16:45\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not update group training when retro date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"UpdatedTestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2000-10-01\",\r\n    \"startTime\": \"16:00\",\r\n    \"endTime\": \"17:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not update group training when start hour after end hour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"a\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingName\": \"UpdatedTestTraining1\",\r\n    \"trainerId\": \"Trainer1\",\r\n    \"date\": \"2021-10-01\",\r\n    \"startTime\": \"17:00\",\r\n    \"endTime\": \"16:00\",\r\n    \"hallNo\": 1,\r\n    \"limit\": 20,\r\n    \"participants\": [],\r\n    \"reserveList\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not delete group training when invalid training id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{invalidGroupTrainingId}}/remove",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{invalidGroupTrainingId}}",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "View my all group trainings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/trainings/{{validClientId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"trainings",
								"{{validClientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete group training reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/enroll?clientId={{validClientId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}",
								"enroll"
							],
							"query": [
								{
									"key": "clientId",
									"value": "{{validClientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View training participants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/participants",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}",
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not view group training participants when invalid training id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}/participants",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}",
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "View all group trainings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group"
							]
						}
					},
					"response": []
				},
				{
					"name": "View group training by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{validGroupTrainingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{validGroupTrainingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should not view group training id when invalid training id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 400.\", () => {\r",
									"    pm.expect(pm.response.code).equals(400);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/{{invalidGroupTrainingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"{{invalidGroupTrainingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View all group trainings - public view",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/public?startDate={{startDate}}&endDate={{endDate}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"public"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{startDate}}"
								},
								{
									"key": "endDate",
									"value": "{{endDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View group trainings by training type id - public view",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/public/type/{{validTrainingType}}?startDate={{startDate}}&endDate={{endDate}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"public",
								"type",
								"{{validTrainingType}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{startDate}}"
								},
								{
									"key": "endDate",
									"value": "{{endDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View group trainings by training type id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/group/type/{{validTrainingType}}?startDate={{startDate}}&endDate={{endDate}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"group",
								"type",
								"{{validTrainingType}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{startDate}}"
								},
								{
									"key": "endDate",
									"value": "{{endDate}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Individual",
			"item": [
				{
					"name": "View all individual trainings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/individual",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"individual"
							]
						}
					},
					"response": []
				},
				{
					"name": "View all accepted individual trainings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/individual/all/accepted",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"individual",
								"all",
								"accepted"
							]
						}
					},
					"response": []
				},
				{
					"name": "View my all individual trainings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/individual/all/mytrainings/all?clientId={clientId}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"individual",
								"all",
								"mytrainings",
								"all"
							],
							"query": [
								{
									"key": "clientId",
									"value": "{clientId}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create individual training request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainerId\" : \"testTrainer1\",\r\n    \"date\" : \"2021-10-15\",\r\n    \"startTime\": \"12:00\",\r\n    \"endTime\" : \"13:00\",\r\n    \"remarks\" : \"I need a good individual TRX traning\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/individual/request?clientId={clientId}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"individual",
								"request"
							],
							"query": [
								{
									"key": "clientId",
									"value": "{clientId}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete individual training request by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/individual/request/{trainingId}?clientId={clientId}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"individual",
								"request",
								"{trainingId}"
							],
							"query": [
								{
									"key": "clientId",
									"value": "{clientId}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View individual training by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/individual/individual/{trainingId}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"individual",
								"individual",
								"{trainingId}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept individual training by trainer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"hallNo\" : 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/individual/{trainingId}/accept",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"individual",
								"{trainingId}",
								"accept"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decline individual training by trainer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/individual/{trainingId}/decline",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"individual",
								"{trainingId}",
								"decline"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "View",
					"item": [
						{
							"name": "All",
							"item": [
								{
									"name": "View group training all reviews",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { isEqual, isNull, isEmpty } = require('lodash');\r",
													"\r",
													"pm.test(\"Response status should be 200.\", () => {\r",
													"    pm.expect(pm.response.code).equals(200);\r",
													"});\r",
													"\r",
													"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
													"\r",
													"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
													"});\r",
													"\r",
													"pm.test(\"Body not null\", () => {\r",
													"    pm.expect(isNull(pm.response.body)).to.be.false;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8020/trainings/review/page/0?startDate=2021-06-10&endDate=2021-06-20",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8020",
											"path": [
												"trainings",
												"review",
												"page",
												"0"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2021-06-10"
												},
												{
													"key": "endDate",
													"value": "2021-06-20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Should Not View group training all reviews - when invalid dates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { isEqual, isNull, isEmpty } = require('lodash');\r",
													"\r",
													"pm.test(\"Response status should be 400.\", () => {\r",
													"    pm.expect(pm.response.code).equals(400);\r",
													"});\r",
													"\r",
													"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
													"\r",
													"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
													"});\r",
													"\r",
													"pm.test(\"Body not null\", () => {\r",
													"    pm.expect(isNull(pm.response.body)).to.be.false;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8020/trainings/review/page/0?startDate=2021-06-20&endDate=2021-06-10",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8020",
											"path": [
												"trainings",
												"review",
												"page",
												"0"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2021-06-20"
												},
												{
													"key": "endDate",
													"value": "2021-06-10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "View group training all reviews - public view",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8020/trainings/trainingType/{trainingTypeId}/public/page/{page}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8020",
											"path": [
												"trainings",
												"trainingType",
												"{trainingTypeId}",
												"public",
												"page",
												"{page}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "View group training review by training type ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8020/trainings/trainingType/{trainingTypeId}/page/{page}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8020",
									"path": [
										"trainings",
										"trainingType",
										"{trainingTypeId}",
										"page",
										"{page}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "View group training review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200.\", () => {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Body not null\", () => {\r",
									"    pm.expect(isNull(pm.response.body)).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/reviews/{reviewId}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"reviews",
								"{reviewId}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create group training review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trainingTypeId\" : \"eeded953-e37f-435a-bd1e-9fb2a327c46m\",\r\n    \"stars\" : 5,\r\n    \"text\" : \"Very good, training\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/review?clientId=client123",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"review"
							],
							"query": [
								{
									"key": "clientId",
									"value": "client123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete group training review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/review/{reviewId}?clientId=client123",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"review",
								"{reviewId}"
							],
							"query": [
								{
									"key": "clientId",
									"value": "client123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify group training review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual, isNull, isEmpty } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stars\" : 4,\r\n    \"text\" : \"Good training!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8020/trainings/review/{reviewId}?clientId=client123",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"review",
								"{reviewId}"
							],
							"query": [
								{
									"key": "clientId",
									"value": "client123"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TrainingTypes",
			"item": [
				{
					"name": "Create training type",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "trainingName",
									"value": "Test",
									"type": "text"
								},
								{
									"key": "description",
									"value": "sample description",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8020/trainings/type",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"type"
							]
						}
					},
					"response": []
				},
				{
					"name": "View all training types - manager view",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/types?publicView=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"types"
							],
							"query": [
								{
									"key": "publicView",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View all training types - public view",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/types?publicView=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"types"
							],
							"query": [
								{
									"key": "publicView",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update training type",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "trainingName",
									"value": "Updated Test",
									"type": "text"
								},
								{
									"key": "description",
									"value": "updated description",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8020/trainings/type/{trainingTypeId}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"type",
								"{trainingTypeId}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete training type by id",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8020/trainings/type/{trainingTypeId}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8020",
							"path": [
								"trainings",
								"type",
								"{trainingTypeId}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "validGroupTrainingId",
			"value": ""
		}
	]
}